<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAIAAAACAAAABgAAABEAAAAgAAAALgAAADgAAABAAAAARgAAAEsAAABQAAAAUgAA
        AFYAAABcAAAAXwAAAFwAAABZAAAAVgAAAFIAAABOAAAASQAAAEMAAAA8AAAAMgAAACcAAAAbAAAADwAA
        AAYAAAABAAAAAAAAAAYAAAASAAAACgAAABAAAAA0AAAAYQAAAHcAAAB/AAAAgwAAAIUAAACGAAAAiwsN
        EZ4PEhmrFBkjvSAmNNI5QE3cJCw30RUeKsQcJTHBExkhswQGCJgAAACKAAAAhwAAAIYAAACDAAAAfQAA
        AHUAAABmAAAASwAAACIAAAAGAAAAAwAAAAwAAAANAAAAJQAAAFMAAABzAAAAgAAAAIcAAACKBwkOoBIW
        H7QsNkzTUV569T9NZv08UG3/SGKD/1x7nP9fgKL/XYCk/12ApP9Qcpb+O1p77CU9V9IMGCWuAQIEkwAA
        AIoAAACKAAAAhgAAAH0AAABlAAAAMQAAAAgAAAAAAAAAAAAAAAoAAAAcAAAAGQAAABsAAAAoBggLXi03
        UbpMXIPxWmyR/WZ6n/9UbY3/Vnib/2uUuP9zo8b/cKfK/2mmy/9hosn/WpzG/1KUwf9JiLj/OHOn/x5T
        iPoHMV7dABUqjwAAAEcAAAA0AAAAIwAAABEAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJjFHACYx
        SidAT3LAcIi4/3uTvf9thKP/Vnea/2CIsf9nl8P/Up/J/zidyf8mm8r/G5nL/xWVyv8RjMf/EI7F/w+I
        v/8Pfbb/C2uo/wNTlP8APXrwAC5efgEXJwkAFikAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIu
        PQAcKDUTO0tttmyDsP+Tr9f/a4Gc/0Fqj/9Mh7P/SIvA/yaAwP8Pksv/B6PU/wWn2f8Eqtz/A6Pb/wGR
        1f8Cndf/Ap7U/wKYzf8Ci8L/AXiz/wBenv8AQ4P8ADFkjAEZJAgBIj4AARsuAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVHGVAC1BUW1MYIL+e5O6/3GHn/8uUnL/IGyh/ymGvP8RgsT/BI/Q/wSl3P8FtuX/Bbno/wW7
        6f8Esef/AqLj/wOn4/8DreP/A67g/wOn2f8Cmc3/AYS7/wFioP8APn36AC9ecADo/wABDA8AAAEBABNb
        KwAPRyIAEEwkAA4rFwANAAAHNE1Xu1Vvjv9jdZL/Rk9j/x9McP8JbJr/CX6y/wSMw/8Ep9j/Bbzp/wbD
        7v8Gxe7/Bsfv/wW97P8DsOj/A7Do/wS+6/8Even/BLfl/wOu3f8Cn9D/AYO6/wFcnf8AP3vkAClOMgAv
        WgACIDQAEU8lAA9HIhUPRCBDCSYRMxhEJIQrXUPwR2Ju/z5KYP8qLEr/KktV/wthZ/8MdoD/DH6F/w2B
        g/8Kkp7/Brna/wfP8f8G0fL/BcXv/wS87P8Euuz/BcXu/wXH7v8Ewuv/BLvm/wOx3v8CmMz/AXiz/wJU
        lP8BOGuWAAAAAQAUIgAJKBMKEU0keRBLI1kKJBFyFlwn+CGCOP8gZzf/HTU2/yEbSf85UHD/B4eq/waz
        2/8HweX/Cb3Y/w6Ymv8NhYT/CLrW/wrT9P8IzfL/B8nx/wjF8P8Gxe//Bs7x/wXL7/8ExOz/BLzm/wOr
        2f8Ck8X/Bm+p/wVJgeAEK0YkBS9LAAszGDcMOBtcEE4kAAIAAQ0NRBmsHIg1/xqGMP8ZKzP/Lw1i/0le
        hf8Ilbn/B8Lo/wnO8v8K1vb/C9f0/xCcm/8SjJX/HL3b/yfS8P8nz+7/G8Xn/w3Q8v8H1PP/BtDx/wXE
        7v8Ewuv/A6/f/wOj0P8JhLj/ClmS/wk2TW4GVI8ADDgaVAw3GjcNPBwACiwRAAghDUMacC3yIJs5/x1G
        OP9NLX3/VGuU/wmauv8Ix+r/C9T0/wza9v8O3/n/Ds/g/xyGfP8Ynrj/E8Xo/xLD6P8fxeX/F9X0/wbT
        8/8H0/P/BcHt/wS86v8DreH/BK3X/wqTwf8OaaH/DD1PuRUOAAsNPBxiDDkbKw09HAAIGg4ABhIAOBRc
        H+senTL/HnUy/1pBif9ecaD/EZGw/wnE5f8N2PX/D974/xDi+f8U5Pn/IJuS/xORoP8Aye7/AM3z/x/M
        6v8k2fP/Ctf1/wfO8v8Fwe3/BLbp/wOp4P8Dqdf/DJ7H/xN1q/8NQVLmESICLw9DIGkNPx0rDj4gAAAA
        AAESIVWXG1o+/x6LM/8fdC//Sjh+/32QxP8/kbP/CLDN/w7X8v8R4fj/E+X6/x3q/f8mqaf/DYeO/wHI
        6P8C1PT/EMfl/yLK5P8P1/X/B8/y/wbG7/8Eu+v/BK3i/wSp2P8Posr/GHyx/xNDVfkRJApdD0QgZQ5C
        HzQUUikAImc/DyVwY8UkbXr/EzSU/xdiJ/9FWnD/iaLW/0x6kf8Jf3n/Dr/S/xLh9v8V6Pr/G+3+/yPG
        zP8skI3/Gr3U/yDR6f843/H/H9/0/w7c9/8I0/P/Bsvx/wW/7P8EseL/BaPU/xahyv8egLP/Hk1V/xAs
        CoYNPR1QDT0dQxBGIQAXHx0EETsSqyN7Qf8hYn3/GmUp/0d0av98k8T/Kkw7/wxVJv8NnZz/E93y/xbq
        +/8Z7v7/GNjj/xubnf8rytr/K9zu/xvq/P8P4/n/DN33/wnV9P8HzfH/BcHs/wSx4P8JmMv/IpzG/yV+
        rv8iTkT/EDALowowFy0KMBdRDTYbAAMAAAgKJAq3F1UX/yJ9K/8eciH/LmM+/z5jXP8WUhX/D0sa/w2M
        df8U0+T/GOr7/xru/f8a5PD/E6Oq/xna6f8Y6Pr/EeT6/w/g+P8M2/b/CdX0/wfN8f8Fwen/Bq3b/xmb
        yv81nsb/K3Kc/xxKKP8QNA2vBx4ODQcfD1MAAAAEC0oXMQwxEukQNhD/FE0S/xtgGP8aXxj/GlwX/xhT
        Ff8RVhf/D3pQ/yPG1P8x6vr/KO77/x/q+P8Vs7v/Ftzr/xTp+/8R4/n/Dt/4/wza9v8J1PP/B8vu/wm9
        5f8ardb/QqLK/0WUv/9Nfo3/HVAc/xAwDqIFGwwABBEIMgAAABEPaCNTFFk3/CtjKf8TMBP/DzgS/xJH
        Ev8UUhb/FGAb/xODJf8RfEf/Qb3H/37u+v908vv/WPH7/zPH0P8r3+//JOj7/xzj+f8X3vf/Fdn0/xbT
        8f8eyuv/NcHi/1u72f9dqsz/RYWt/zlmTP8VSBH9ECoOcwMMBgACCAQFAAAAAw0tLDoTOjjtLG8l8yhj
        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
        AAAAAAABAAAAAfgAAAP4AAAH/8AAD//wAB8=
</value>
  </data>
</root>